name: Release Pipeline

on:
  push:
    tags:
      - "v*.*.*"  
jobs:
  build-and-push-image:
    name: Build and Push Controller Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      - name: Extract Version from Tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build and Push Image
        run: |
          IMAGE_NAME=my-controller
          docker build -t myregistry.com/$IMAGE_NAME:$VERSION .
          docker push myregistry.com/$IMAGE_NAME:$VERSION

  package-and-push-helm:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Extract Version from Tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Update Helm Chart Version
        run: |
          sed -i "s/^version:.*/version: $VERSION/" charts/my-controller/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: $VERSION/" charts/my-controller/Chart.yaml

      - name: Package Helm Chart
        run: helm package charts/my-controller --destination ./

      - name: Push Helm Chart
        run: |
          helm push my-controller-$VERSION.tgz ${{ secrets.HELM_REPO_URL }}

  release-documentation:
    name: Generate and Publish Release Notes
    runs-on: ubuntu-latest
    needs: [build-and-push-image, package-and-push-helm]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Version from Tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Generate Release Notes
        run: |
          echo "## Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### Container Image" >> release_notes.md
          echo "- Image: \`myregistry.com/my-controller:$VERSION\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Helm Chart" >> release_notes.md
          echo "- Chart Version: \`$VERSION\`" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body_path: release_notes.md
          files: my-controller-${{ env.VERSION }}.tgz
          token: ${{ secrets.GH_TOKEN }}
